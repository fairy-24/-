#include<iostream>
#define PI 3.14
using namespace std;

class Point
{
public:
	double x;
	double y;

	//设置点
	void setPoint(double s_x,double s_y)
	{
		x = s_x;
		y = s_y;
	}

	//默认构造函数
	Point() :x(0), y(0)
	{
		cout << "Point default constructor" << endl;
	}

	//带参构造函数
	Point(double s_x, double s_y) :x(s_x), y(s_y)
	{
		cout << "Point constructor(" << x << "," << y << ")" << endl;
	}

	//显示点的位置
	void show() const
	{
		cout << "(" << x << "," << y << ")"<<endl;;
	}

	
	//析构函数
	~Point() 
	{
		cout << "Point destructor(" << x << "," << y << ")"<<endl;
	}
};

class Shape
{
public:
	char description[20];//图形名
	Point p;//点对象表示位置

	//默认构造
	Shape() :p(0, 0)
	{
		strncpy_s(description, "default", 8);
		cout << "Shape default construction" << endl;
	}

	//有参构造函数
	Shape(const char* des, double x, double y)
	{
		strncpy_s(description, des, strlen(des));
		cout << "Shape constructor:" << description << endl;

	}
	//显示对象位置
	virtual void show() const
	{
		cout << "Shape at：" << endl;
		p.show();
		cout << "description:" << description << endl;
	}

	//virtual double getArea() const
	//{
	//	return 0.0;
	//}
	//
	virtual double getArea() = 0;


	virtual ~Shape()
	{
		cout << "Shape destructor" << endl;
	}

};

class Circle :public Shape
{
public:
	double radius;

	/*void setRadius(double s_r)
	{
		radius = s_r;
	}*/
	Circle(double x,double y,double r,const char*des):Shape(des,x,y),radius(r)
	{
		cout << "Circle constructor,radius:" << radius << endl;
	}

	~Circle() 
	{
		cout << "Circle destructor" << endl;
	}
	double getArea() const
	{
		return PI * radius * radius*1.0;
	}
	
	void show()const
	{
		cout << "Circle at:";
		p.show();
		cout << " radius: " << radius << " area: " << getArea() << endl;
	}
	
};

class Square :public Shape
{
public:
	double sideLength;

	/*void setSquare()
	{

	}*/
	Square(double x,double y,double side):Shape("Square",x,y), sideLength(side)
	{
		cout << "Square constructor side:" << sideLength << endl;
	}
	~Square() 
	{
		cout << "Square destructor" << endl;
	}
	double getArea() const
	{
		return sideLength * sideLength * 1.0;
	}
	
	void show()const
	{
		cout << "Square at";
		p.show();
		cout << " side: " << sideLength << " area: " << getArea() << endl;
	}
};

void test(Shape* p)
{
	if (p) 
	{
		p->show();
		delete p;
		cout << "~~~~~~~~~~~`" << endl;
	}
	
}

int main() {
	Shape* base[3] = { new Shape("Shape",0,0), new Square(1,1,5), new Circle(1,2,1,"circle")};
	for (int i = 0; i < 3; i++)
		test(base[i]);
	return 0;
}
